(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{487:function(e,a,t){e.exports=t.p+"assets/img/datapackage-connector-power-bi.b54cbe23.gif"},488:function(e,a,t){e.exports=t.p+"assets/img/datapackage-connector-power-bi-service.5464d6e2.png"},598:function(e,a,t){"use strict";t.r(a);var o=t(29),r=Object(o.a)({},(function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("p",[o("a",{attrs:{href:"https://github.com/nimblelearn/datapackage-connector",target:"_blank",rel:"noopener noreferrer"}},[e._v("Data Package Connector"),o("OutboundLink")],1),e._v(", also known as datapackage-connector, is a "),o("a",{attrs:{href:"https://docs.microsoft.com/en-us/power-bi/desktop-connector-extensibility",target:"_blank",rel:"noopener noreferrer"}},[e._v("Power BI Custom Connector"),o("OutboundLink")],1),e._v(" that enables you to quickly load one or more tables from Tabular Data Packages into Power BI. It builds on top of one of our other Frictionless Data projects, "),o("RouterLink",{attrs:{to:"/blog/2018/07/20/nimblelearn/"}},[e._v("Data Package M")]),e._v(" (also known as datapackage-m), and provides a user friendly Power BI ‘Get Data’ experience and also allows these Power BI tables to be refreshed directly from Tabular Data Packages within the Power BI Service. This has been a sought after capability because the Data Package M functions alone don’t currently support this scenario.")],1),e._v(" "),o("p",[e._v("When we first created datapackage-m, we thought it would be quite powerful if it was possible to include a ‘Get Data’ experience in Power BI for Tabular Data Packages, but this wasn’t possible with Power Query M functions alone. For those of you not too familiar with Power BI, the ‘Get Data’ experience is a user interface (UI) wizard that guides you through some simple steps to  get data from supported data sources in Power BI. With datapackage-connector, we’ve introduced a ‘Get Data’ experience for Tabular Data packages which makes it easier to build Power BI reports and dashboards from Tabular Data Packages. This is especially useful when a Tabular Data Package has several tables that you’d like to load into Power BI in one go.")]),e._v(" "),o("p",[o("img",{attrs:{src:t(487),alt:""}}),o("br"),e._v(" "),o("em",[e._v("How datapackage-connector works in Power BI")])]),e._v(" "),o("p",[e._v("datapackage-m has one major limitation from a Power BI perspective: it doesn’t support the ability to refresh data from within the Power BI service and this means the data refreshes must be done from Power BI Desktop. datapackage-connector,  being a Power BI connector, doesn’t have this limitation. This unlocks a new usage scenario where Power BI reports and dashboards can be built directly on top of Tabular Data Packages and kept up-to-date through scheduled data refreshes.")]),e._v(" "),o("p",[o("img",{attrs:{src:t(488),alt:""}}),o("br"),e._v(" "),o("em",[e._v("datapackage-connector supports data refresh in the Power BI service")])]),e._v(" "),o("p",[e._v("datapackage-connector reuses the same Power Query M functions from datapackage-m and this means that it has the same level of Frictionless Data specs support. We’ll be keeping these two"),o("br"),e._v("\nprojects aligned as we further expand their support for the specs. Read more about datapackage-m "),o("RouterLink",{attrs:{to:"/blog/2018/07/20/nimblelearn/"}},[e._v("here")]),e._v(", and check out the documentation for datapackage-connector on our "),o("a",{attrs:{href:"https://github.com/nimblelearn/datapackage-connector",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub repo"),o("OutboundLink")],1),e._v(".")],1)])}),[],!1,null,null,null);a.default=r.exports}}]);